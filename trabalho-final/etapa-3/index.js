/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,24],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,19],$V9=[1,33],$Va=[1,32],$Vb=[1,39],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[10,11,12,15,18,19,20,21,29,52,53,59,61,63,71,72],$Vh=[1,42],$Vi=[2,18],$Vj=[1,10,11,12,15,18,19,20,21,29,30,52,53,59,61,63,66,69,70,71,72],$Vk=[1,10,11,12,15,18,19,20,21,29,30,52,53,59,61,62,63,66,69,70,71,72],$Vl=[9,60,67],$Vm=[9,40,42,44,45,47,48,49,50,52,53,55,56,60,67],$Vn=[2,60],$Vo=[9,40,60,67],$Vp=[1,59],$Vq=[9,40,42,60,67],$Vr=[1,60],$Vs=[1,61],$Vt=[9,40,42,44,45,60,67],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[9,40,42,44,45,47,48,49,50,60,67],$Vz=[1,66],$VA=[1,67],$VB=[9,40,42,44,45,47,48,49,50,52,53,60,67],$VC=[1,68],$VD=[1,69],$VE=[1,73],$VF=[9,37,38,40,42,44,45,47,48,49,50,52,53,55,56,60,67],$VG=[9,14],$VH=[30,66,69],$VI=[1,130],$VJ=[1,132];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"declarations":4,"statements":5,"declaration":6,"type":7,"var_list":8,";":9,"CHAR":10,"INT":11,"FLOAT":12,"variable":13,",":14,"IDENTIFIER":15,"=":16,"value":17,"INT_CONST":18,"FLOAT_CONST":19,"CHAR_CONST":20,"STRING_CONST":21,"statement":22,"expression":23,"block":24,"if_statement":25,"switch_statement":26,"while_statement":27,"for_statement":28,"{":29,"}":30,"assignment":31,"logical_or":32,"ADD_ASSIGN":33,"SUB_ASSIGN":34,"MUL_ASSIGN":35,"DIV_ASSIGN":36,"INCREMENT":37,"DECREMENT":38,"logical_and":39,"||":40,"equality":41,"&&":42,"relational":43,"EQ":44,"NE":45,"additive":46,"LT":47,"LE":48,"GT":49,"GE":50,"multiplicative":51,"+":52,"-":53,"unary":54,"*":55,"/":56,"postfix":57,"primary":58,"(":59,")":60,"IF":61,"ELSE":62,"SWITCH":63,"case_list":64,"case_block":65,"CASE":66,":":67,"case_body":68,"DEFAULT":69,"BREAK":70,"WHILE":71,"FOR":72,"$accept":0,"$end":1},
terminals_: {2:"error",9:";",10:"CHAR",11:"INT",12:"FLOAT",14:",",15:"IDENTIFIER",16:"=",18:"INT_CONST",19:"FLOAT_CONST",20:"CHAR_CONST",21:"STRING_CONST",29:"{",30:"}",33:"ADD_ASSIGN",34:"SUB_ASSIGN",35:"MUL_ASSIGN",36:"DIV_ASSIGN",37:"INCREMENT",38:"DECREMENT",40:"||",42:"&&",44:"EQ",45:"NE",47:"LT",48:"LE",49:"GT",50:"GE",52:"+",53:"-",55:"*",56:"/",59:"(",60:")",61:"IF",62:"ELSE",63:"SWITCH",66:"CASE",67:":",69:"DEFAULT",70:"BREAK",71:"WHILE",72:"FOR"},
productions_: [0,[3,2],[4,1],[4,2],[6,3],[7,1],[7,1],[7,1],[8,1],[8,3],[13,1],[13,3],[17,1],[17,1],[17,1],[17,1],[5,1],[5,2],[22,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[24,3],[23,1],[23,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,1],[32,1],[32,3],[39,1],[39,3],[41,1],[41,3],[41,3],[43,1],[43,3],[43,3],[43,3],[43,3],[46,1],[46,3],[46,3],[51,1],[51,3],[51,3],[54,1],[54,2],[54,2],[57,1],[57,2],[57,2],[58,1],[58,1],[58,1],[58,1],[58,1],[58,3],[25,5],[25,7],[26,7],[64,0],[64,2],[65,4],[65,3],[68,5],[68,3],[68,4],[68,3],[68,1],[68,2],[27,5],[28,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,10:$V0,11:$V1,12:$V2},{1:[3]},{5:8,6:9,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},o($Vg,[2,2]),{8:40,13:41,15:$Vh},{15:[2,5]},{15:[2,6]},{15:[2,7]},{1:[2,1],6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:43,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},o($Vg,[2,3],{1:$Vi}),o($Vj,[2,16]),{9:[1,45]},o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vl,[2,26]),o($Vl,[2,27],{40:[1,46]}),{5:47,6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},{59:[1,48]},{59:[1,49]},{59:[1,50]},{59:[1,51]},o($Vm,$Vn,{16:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],38:[1,58]}),o($Vo,[2,36],{42:$Vp}),o($Vq,[2,38],{44:$Vr,45:$Vs}),o($Vt,[2,40],{47:$Vu,48:$Vv,49:$Vw,50:$Vx}),o($Vy,[2,43],{52:$Vz,53:$VA}),o($VB,[2,48],{55:$VC,56:$VD}),o($Vm,[2,51]),o($Vm,[2,54],{37:[1,70],38:[1,71]}),{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,52:$V9,53:$Va,54:72,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,52:$V9,53:$Va,54:74,57:31,58:34,59:$Vb},o($VF,[2,57]),o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,63]),o($VF,[2,64]),{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:75,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{9:[1,76],14:[1,77]},o($VG,[2,8]),o($VG,[2,10],{16:[1,78]}),o($Vj,[2,17]),o($Vk,$Vi),o($Vk,[2,19]),{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,39:79,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:43,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,30:[1,80],31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:81,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:82,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:83,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:84,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:85,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:86,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:87,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:88,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:89,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},o($Vl,[2,33]),o($Vl,[2,34]),{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,41:90,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,43:91,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,43:92,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,46:93,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,46:94,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,46:95,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,46:96,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,51:97,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,51:98,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,52:$V9,53:$Va,54:99,57:31,58:34,59:$Vb},{15:$VE,18:$V4,19:$V5,20:$V6,21:$V7,52:$V9,53:$Va,54:100,57:31,58:34,59:$Vb},o($VF,[2,58]),o($VF,[2,59]),o($Vm,[2,55]),o($VF,$Vn),o($Vm,[2,56]),{60:[1,101]},o($Vk,[2,4]),{13:102,15:$Vh},{17:103,18:[1,104],19:[1,105],20:[1,106],21:[1,107]},o($Vo,[2,37],{42:$Vp}),o($Vk,[2,25]),{60:[1,108]},{60:[1,109]},{60:[1,110]},{9:[1,111]},o($Vl,[2,28]),o($Vl,[2,29]),o($Vl,[2,30]),o($Vl,[2,31]),o($Vl,[2,32]),o($Vq,[2,39],{44:$Vr,45:$Vs}),o($Vt,[2,41],{47:$Vu,48:$Vv,49:$Vw,50:$Vx}),o($Vt,[2,42],{47:$Vu,48:$Vv,49:$Vw,50:$Vx}),o($Vy,[2,44],{52:$Vz,53:$VA}),o($Vy,[2,45],{52:$Vz,53:$VA}),o($Vy,[2,46],{52:$Vz,53:$VA}),o($Vy,[2,47],{52:$Vz,53:$VA}),o($VB,[2,49],{55:$VC,56:$VD}),o($VB,[2,50],{55:$VC,56:$VD}),o($Vm,[2,52]),o($Vm,[2,53]),o($VF,[2,65]),o($VG,[2,9]),o($VG,[2,11]),o($VG,[2,12]),o($VG,[2,13]),o($VG,[2,14]),o($VG,[2,15]),{6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:112,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},{29:[1,113]},{6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:114,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:115,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},o($Vj,[2,66],{62:[1,116]}),o($VH,[2,69],{64:117}),o($Vk,[2,79]),{9:[1,118]},{6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:119,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},{30:[1,120],65:121,66:[1,122],69:[1,123]},{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:124,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},o($Vk,[2,67]),o($Vk,[2,68]),o($VH,[2,70]),{15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,23:125,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb},{67:[1,126]},{60:[1,127]},{67:[1,128]},{5:131,6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$VI,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,68:129,70:$VJ,71:$Ve,72:$Vf},{6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:133,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,71:$Ve,72:$Vf},{5:131,6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$VI,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,68:134,70:$VJ,71:$Ve,72:$Vf},o($VH,[2,72]),{5:135,6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,70:[1,136],71:$Ve,72:$Vf},o($VH,[2,77],{7:4,23:11,24:12,25:13,26:14,27:15,28:16,31:17,32:18,39:25,41:26,43:27,46:28,51:29,54:30,57:31,58:34,22:43,6:44,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,29:$V8,52:$V9,53:$Va,59:$Vb,61:$Vc,63:$Vd,70:[1,137],71:$Ve,72:$Vf}),{9:[1,138]},o($Vk,[2,80]),o($VH,[2,71]),{6:44,7:4,10:$V0,11:$V1,12:$V2,15:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:43,23:11,24:12,25:13,26:14,27:15,28:16,29:$V8,30:[1,140],31:17,32:18,39:25,41:26,43:27,46:28,51:29,52:$V9,53:$Va,54:30,57:31,58:34,59:$Vb,61:$Vc,63:$Vd,70:[1,139],71:$Ve,72:$Vf},{9:[1,141]},{9:[1,142]},o($VH,[2,78]),{9:[1,143]},o([10,11,12,15,18,19,20,21,29,30,52,53,59,61,63,66,69,70,71,72],[2,74]),{30:[1,144]},o($VH,[2,76]),{30:[1,145]},o($VH,[2,75]),o($VH,[2,73])],
defaultActions: {5:[2,5],6:[2,6],7:[2,7]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignora espaços e quebras de linha */
break;
case 1:/* ignora comentários de linha */
break;
case 2:/* ignora comentários de bloco */
break;
case 3:return 10;
break;
case 4:return 11;
break;
case 5:return 12;
break;
case 6:return 61;
break;
case 7:return 62;
break;
case 8:return 63;
break;
case 9:return 66;
break;
case 10:return 69;
break;
case 11:return 70;
break;
case 12:return 71;
break;
case 13:return 72;
break;
case 14:return 37;
break;
case 15:return 38;
break;
case 16:return 33;
break;
case 17:return 34;
break;
case 18:return 35;
break;
case 19:return 36;
break;
case 20:return 44;
break;
case 21:return 45;
break;
case 22:return 47;
break;
case 23:return 48;
break;
case 24:return 49;
break;
case 25:return 50;
break;
case 26:return 52;
break;
case 27:return 53;
break;
case 28:return 55;
break;
case 29:return 56;
break;
case 30:return 16;
break;
case 31:return 14;
break;
case 32:return 9;
break;
case 33:return 67;
break;
case 34:return 59;
break;
case 35:return 60;
break;
case 36:return 29;
break;
case 37:return 30;
break;
case 38:return 19;
break;
case 39:return 18;
break;
case 40:return 20;
break;
case 41:return 21;
break;
case 42:return 15;
break;
case 43:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*([^*]|\*+[^*/])*\*\/)/,/^(?:char\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:'[^\'\\]')/,/^(?:"[^\"\\]*")/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = index;
exports.Parser = index.Parser;
exports.parse = function () { return index.parse.apply(index, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}